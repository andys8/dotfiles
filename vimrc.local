" Theme
colo gruvbox
set relativenumber
set confirm
let g:airline_powerline_fonts = 1
let g:airline_theme = 'dracula'

" Allow project-specific .vimrc files
set exrc
set secure

" Switch themes
command Light colo lightning
command Dark colo contrasty

" Copy command
vnoremap <C-x> :!pbcopy<CR>
vnoremap <C-c> :w !pbcopy<CR><CR>

" Scroll
nnoremap <C-u> <PageDown>
nnoremap <C-i> <PageUp>

" Exit insert mode
inoremap jj <ESC>

" Save
nnoremap <C-s> :w<CR>
inoremap <C-s> <ESC>:w<CR>

" Saves the file (handling the permission-denied error)
cnoremap w!! w !sudo tee % >/dev/null

" Date
inoremap <C-d> <C-R>=strftime("%Y-%m-%d")<CR>
cnoremap <C-d> <C-R>=strftime("%Y-%m-%d")<CR>

" Expand snippets
let g:UltiSnipsExpandTrigger="<c-j>"

" YouCompleteMe
nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>
nnoremap <leader>s :YcmCompleter FixIt<CR>
nnoremap <leader>g :YcmCompleter GoTo<CR>
nnoremap <leader>t :YcmCompleter GetType<CR>
nnoremap <leader>u :YcmCompleter GoToReferences<CR>
nnoremap <leader>d :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>o :YcmCompleter OrganizeImports<CR>
nnoremap <leader>r :YcmCompleter RefactorRename<space>

let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_semantic_triggers = { 'elm' : ['.'], 'haskell' : ['.'] }

" Java
let g:syntastic_java_checkers = []
let g:ale_java_google_java_format_options = '--aosp'
let g:ale_java_javac_executable = "javac -cp ~/.m2/repository/org/projectlombok/lombok/1.18.6/lombok-1.18.6.jar"


" Elm (plugin part of vim-polyglot)
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:elm_syntastic_show_warnings = 1
let g:elm_setup_keybindings = 0
let g:elm_format_autosave = 1
let g:elm_format_fail_silently = 1
let g:elm_lsp_use_global = 0

" Haskell
let g:haskellmode_completion_ghc = 0
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

" Ale: Linting
let g:ale_lint_on_text_changed = 'off'
let g:ale_completion_delay = 200
let g:ale_lint_delay = 750
autocmd FileType elm nnoremap <silent> <leader>p :ALEFix<CR>
autocmd FileType elm nnoremap <silent> <leader>a :ALENext -wrap -error<CR>

let g:ale_fixers = {
      \ 'javascript': ['prettier'],
      \ 'typescript': ['prettier'],
      \ 'scss': ['prettier'],
      \ 'json': ['prettier'],
      \ 'markdown': ['prettier'],
      \ 'elm': ['elm-format'],
      \ 'haskell': ['brittany'],
      \ 'scala': ['scalafmt'],
      \ 'java': ['google_java_format']
      \}

let g:ale_linters = {
      \ 'haskell': ['hdevtools', 'hlint'],
      \ 'markdown': ['markdownlint'],
      \ 'javascript': [],
      \ 'typescript': [],
      \}

" List toggle
let g:lt_location_list_toggle_map = '<leader>l'
let g:lt_quickfix_list_toggle_map = '<leader>รถ'

" Rainbow brackets
let g:rainbow_active = 1

" Ctags
set tags+=tags;tags.vendors;,tags;

autocmd FileType elm,haskell nnoremap <leader>d g<C-]>
autocmd FileType elm,haskell nnoremap <leader>D :Tags <C-R><C-W><CR>

let g:tagbar_type_elm = {
      \ 'kinds' : [
      \ 'f:function:0:0',
      \ 'm:modules:0:0',
      \ 'i:imports:1:0',
      \ 't:types:1:0',
      \ 'a:type aliases:0:0',
      \ 'c:type constructors:0:0',
      \ 'p:ports:0:0',
      \ 's:functions:0:0',
      \ ]
      \}

let g:tagbar_type_markdown = {
      \ 'ctagstype' : 'markdown',
      \ 'kinds' : [
      \ 'h:Heading_L1',
      \ 'i:Heading_L2',
      \ 'k:Heading_L3'
      \ ]
      \}


" Search with Rg (overwrites vimrc)
nnoremap <silent> <Leader>f :Rg<CR>
nnoremap <silent> <leader>F :Rgrep<CR>
" Rg will ignore filenames
command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \ 'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>),
      \ 1,
      \ {'options': '--delimiter : --nth 2..'},
      \ <bang>0)


" Spell checking
autocmd FileType markdown,text,gitcommit setlocal spell
autocmd FileType markdown,text,gitcommit nnoremap <leader>s [s1z=<c-o>
highlight clear SpellBad
highlight SpellBad term=underline cterm=underline ctermfg=009

" Zen mode / goyo
nnoremap <F6> :Goyo<CR>

" Command to read windows files (crlf)
abbrev windowsfile e ++ff=dos
abbrev dosfile e ++ff=dos

" vimdiff
if &diff
  map <leader>1 :diffget LOCAL<CR>
  map <leader>2 :diffget BASE<CR>
  map <leader>3 :diffget REMOTE<CR>
  map <leader>g :diffget<CR>
  map <leader>d :difft<CR>
  map <leader>o :diffo<CR>
endif

" Startify
let g:startify_files_number = 5
let g:startify_change_to_dir = 0
let startify_custom_header = split(system('toilet -f pagga " I like Vim"'), '\n')

" Coc
set hidden
set nobackup
set nowritebackup

" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=750

" don't give |ins-completion-menu| messages.
set shortmess+=c

inoremap <silent><expr> <c-space> coc#refresh()
inoremap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<TAB>" : coc#refresh()
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

nnoremap <F5> :CocRestart<CR>
nnoremap <silent> <leader>g  :<C-u>CocList -I symbols<CR>
nnoremap <silent> K :call <SID>show_documentation()<CR>
nnoremap <leader>o :CocCommand tsserver.organizeImports<CR>
nmap <leader>r <Plug>(coc-rename)
nmap <leader>s  <Plug>(coc-codeaction)
nmap <leader>S  <Plug>(coc-fix-current)
nmap <silent> <leader>a <Plug>(coc-diagnostic-next)
nmap <silent> <leader>A <Plug>(coc-diagnostic-prev)
nmap <silent> <leader>d <Plug>(coc-definition)
nmap <silent> <leader>D <Plug>(coc-implementation)
nmap <silent> <leader>t <Plug>(coc-type-definition)
nmap <silent> <leader>u <Plug>(coc-references)
nmap <silent> <leader>p <Plug>(coc-format)
vmap <silent> <leader>p  <Plug>(coc-format-selected)

command! -nargs=0 Format :call CocAction('format')

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

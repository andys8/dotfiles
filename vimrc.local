" Vim configuration

scriptencoding utf-8
set relativenumber
set confirm
set shell=/bin/bash
set shortmess+=c
set nobackup
set nowritebackup
set noswapfile
set signcolumn=number

set termguicolors
set t_Co=256
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

" updatetime has performance impact
set updatetime=300

" timout for keys
set timeoutlen=500
" timeout esc sequence
set ttimeoutlen=20

set lazyredraw
set scrolljump=3
set synmaxcol=300
syntax sync minlines=256

" Allow project-specific .vimrc files
set exrc
set secure

" gvim
set guioptions=c
set guifont=Iosevka\ Nerd\ Font\ 14
let g:nerdtree_tabs_open_on_gui_startup = 0

" Switch themes
function SaveTheme(theme)
  if a:theme ==? "Dracula"
    exec "silent ! rm /tmp/.vimrc 2>/dev/null &"
  else
    exec "silent ! echo 'autocmd VimEnter * :" . a:theme . "' > /tmp/.vimrc &"
  endif
  redraw!
endfunction

command Dracula colorscheme dracula | AirlineTheme dracula | set nocursorline | call SaveTheme("Dracula")
command Nord    colorscheme nord    | AirlineTheme nord    | set nocursorline | call SaveTheme("Nord")
command Dark    colorscheme torte   | AirlineTheme dark    | set nocursorline | call SaveTheme("Dark")
command Light   colorscheme zellner | AirlineTheme dark    | set cursorline   | call SaveTheme("Light")

" Theme
let g:dracula_colorterm = 1
let g:dracula_italic = 1
colorscheme dracula

" Airline
let g:airline_theme = 'dracula'
let g:airline_extensions = ['branch', 'coc', 'tabline', 'quickfix']
let g:airline_highlighting_cache = 1
let g:airline_powerline_fonts = 1
let g:airline_skip_empty_sections = 0
let g:airline#extensions#coc#error_symbol = '  '
let g:airline#extensions#coc#warning_symbol = ' '
let g:airline#extensions#branch#vcs_priority = ["git"]
let g:airline#extensions#branch#vcs_checks = []

" Ignore files
set wildignore+=*/node_modules/*,*/.stack-work/*,*/.stack/*,*/dist/*,*/build/*,*/output/*

" Copy command
vnoremap <C-x> :!pbcopy<CR>
vnoremap <C-c> :w !pbcopy<CR><CR>

" Tab is the same as <C-i> and should jump forward
nunmap <Tab>

" Paste multiple times
xnoremap p "_dP

" Exit insert mode
inoremap jj <ESC>
inoremap jk <ESC>

imap <C-h> <Left>
imap <C-j> <Down>
imap <C-k> <Up>
imap <C-l> <Right>

" Yank consistency with other commands
nnoremap Y y$

" Save
nnoremap <C-s> :w<CR>
inoremap <C-s> <ESC>:w<CR>

" Saves the file (handling the permission-denied error)
cnoremap w!! w !sudo tee % >/dev/null

" Save without format
command Writenoformat noa w
command Wnoformat noa w
cabbrev wn Wnoformat

" Load and save Vim config
command Reload source $MYVIMRC
command Config :e ~/dotfiles/vimrc.local
command ConfigPlugins :e ~/dotfiles/vimrc.local.bundles

" Abbreviations
cabbrev Ci CocInfo
cabbrev ci CocInfo
cabbrev Cr CocRestart
cabbrev cr CocRestart
cabbrev Cs CocSearch
cabbrev cs CocSearch
cabbrev Ft Filetypes
cabbrev ft Filetypes
cabbrev Re Reload
cabbrev re Reload
cabbrev Sn Snippets
cabbrev sn Snippets

" Date
inoremap <C-d> <C-R>=strftime("%Y-%m-%d")<CR>
cnoremap <C-d> <C-R>=strftime("%Y-%m-%d")<CR>

" Open links in browser
let g:netrw_nogx = 1
let g:openbrowser_browser_commands = [
  \ {"name": "xdg-open", "args": "qutebrowser {uri} \&" }
\]
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)

" Expand snippets
let g:UltiSnipsExpandTrigger='<Nop>'

" Multiple cursors
let g:multi_cursor_exit_from_visual_mode = 1
let g:multi_cursor_exit_from_insert_mode = 1
let g:multi_cursor_start_word_key = '<C-n>'
let g:multi_cursor_select_all_word_key = '<leader><C-n>'

" Multiple cursor fix for delimitmate issue with '"' char
function! Multiple_cursors_before()
    exe 'DelimitMateOff'
endfunction

function! Multiple_cursors_after()
    exe 'DelimitMateOn'
endfunction

" Elm
let g:polyglot_disabled = ['elm', 'dhall']

" Ctags
set tags+=tags;tags.vendors;,tags;

" Search with Rg (overwrites vimrc)
nnoremap <silent> <leader>f :Rg<CR>
nnoremap <silent> <leader>F :Rg <c-r><c-w><cr>

" Rg search command
command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \ 'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>),
      \ 1,
      \ {'options': '--delimiter : --nth 2..'},
      \ <bang>0)

" Close all other buffers
command! BufOnly silent! execute "%bd|e#|bd#"
noremap <silent> <leader>C :BufOnly<CR>

" Zen mode / goyo
nnoremap <F6> :Goyo<CR>
nnoremap <leader>- :Goyo<CR>

" Command to read windows files (crlf)
cabbrev windowsfile e ++ff=dos
cabbrev dosfile e ++ff=dos

" Startify
let g:startify_files_number = 5
let g:startify_change_to_dir = 0
let startify_custom_header = split(system('toilet -f pagga " VIM Editor"'), '\n')

let g:startify_lists = [
      \ {'type': 'files', 'header': ['   Recently']},
      \ {'type': 'commands', 'header': ['   Commands']},
      \ {'type': 'bookmarks', 'header': ['   Bookmarks']},
      \ ]

let g:startify_commands = [
      \ {'o': ['Open (file)', ':FZF']},
      \ {'f': ['Find (text in file)', ':Rg']},
      \ ]

let g:startify_bookmarks = [
      \ {'d': '~/dotfiles'},
      \ {'v': '~/dotfiles/vimrc.local'},
      \ {'n': '~/dotfiles/nix/packages.nix'},
      \ ]

" Rooter
let g:rooter_silent_chdir = 1
let g:rooter_patterns = [
      \ 'package.json',
      \ 'elm.json',
      \ 'stack.yaml',
      \ '.git/',
      \ 'pom.xml',
      \ 'requirements.txt'
      \ ]

" Coc
let g:coc_node_path = "~/.nix-profile/bin/node"
let g:coc_global_extensions = [
      \ 'coc-cspell-dicts',
      \ 'coc-diagnostic',
      \ 'coc-docker',
      \ 'coc-eslint',
      \ 'coc-gitignore',
      \ 'coc-java',
      \ 'coc-json',
      \ 'coc-markdownlint',
      \ 'coc-metals',
      \ 'coc-prettier',
      \ 'coc-snippets',
      \ 'coc-spell-checker',
      \ 'coc-tslint-plugin',
      \ 'coc-tsserver',
      \ 'coc-vetur',
      \ 'coc-yaml'
      \ ]

nmap          <F5>      :CocRebuild<CR>
nmap          <leader>r :CocSearch <c-r><c-w><CR>
nmap <silent> <leader>R <Plug>(coc-rename)
nmap <silent> <leader>s <Plug>(coc-codeaction-line)
xmap <silent> <leader>s <Plug>(coc-codeaction-selected)
nmap <silent> <leader>S <Plug>(coc-fix-current)
nmap <silent> <leader>a <Plug>(coc-diagnostic-next)
nmap <silent> <leader>A <Plug>(coc-diagnostic-next-error)
nmap <silent> <leader>d <Plug>(coc-definition)
nmap <silent> K         :call CocAction('doHover')<CR>
nmap <silent> <leader>g :call CocAction('doHover')<CR>
nmap <silent> <leader>G <Plug>(coc-diagnostic-info)
nmap <silent> <leader>t <Plug>(coc-type-definition)
nmap <silent> <leader>u <Plug>(coc-references)
nmap <silent> <leader>i <Plug>(coc-implementation)
nmap <silent> <leader>p :call CocActionAsync('format')<CR>
xmap <silent> <leader>p <Plug>(coc-format-selected)
nnoremap <silent> <leader>O :call CocAction('runCommand', 'editor.action.organizeImport')<CR>
nnoremap <silent> <nowait> <leader>l :<C-u>CocList diagnostics<CR>
nnoremap <silent> <nowait> <leader>L :<C-u>CocList -I symbols<cr>

let g:coc_snippet_next = '<tab>'
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use <c-space> to trigger completion.
imap <silent><expr> <c-@> coc#refresh()
nmap <silent>       <c-@> wbea<C-@>

" Coc Errors
hi link CocErrorHighlight SpellBad
hi link CocWarningHighlight SpellLocal
hi link CocInfoHighlight SpellRare
hi link CocHintHighlight SpellCap

" Floating
hi link CocFloating Visual
hi link CocErrorFloat Visual
hi link CocWarningFloat Visual
hi link CocInfoFloat Visual
hi link CocHintFloat Visual

" Pmenu (e.g. completions)
hi! link Pmenu Visual
hi! link PmenuSel ErrorMsg

" vimdiff
if &diff
  map <leader>1 :diffget LOCAL<CR>
  map <leader>2 :diffget BASE<CR>
  map <leader>3 :diffget REMOTE<CR>
  map <leader>g :diffget<CR>
  map <leader>d :difft<CR>
  map <leader>o :diffo<CR>
endif

" Git gutter
let g:gitgutter_sign_priority = 1
let g:gitgutter_sign_added = '✚'
let g:gitgutter_sign_modified = '➜'
let g:gitgutter_sign_removed = '✘'
let g:gitgutter_sign_removed_first_line = '✘'
let g:gitgutter_sign_modified_removed='±'
let g:gitgutter_preview_win_floating = 1

command! -nargs=0 GitUndo :GitGutterUndoHunk

nmap <silent> <leader>m :call GitGutterNextHunkCycle()<CR>
nmap <silent> <leader>M :GitGutterPreviewHunk<CR>

function! GitGutterNextHunkCycle()
  let line = line('.')
  silent! GitGutterNextHunk
  if line('.') == line
    normal! 1G
    GitGutterNextHunk
  endif
endfunction

" git: Do not remember commit message cursor position
autocmd BufReadPost COMMIT_EDITMSG exe "normal! gg"

" NerdTree
let g:NERDTreeMinimalUI = 1
nmap <silent> <leader>n :NERDTreeToggle<CR>
nmap <silent> <leader>N :NERDTreeFind<CR>
hi link NERDTreeOpenable Type
hi link NERDTreeClosable Special
hi link NERDTreeDir Question

" Folding
set foldmethod=indent
set foldnestmax=1
set nofoldenable
set foldlevel=0
noremap <leader>z zM<CR>
noremap <leader>Z zR<CR>

" Expand region
map - <Plug>(expand_region_expand)
map + <Plug>(expand_region_expand)
map _ <Plug>(expand_region_shrink)

" Abolish (coerce casing)
nmap crp crm

" Qutebrowser
au BufRead,BufNewFile qutebrowser-editor-* set filetype=text

" Ranger
let g:ranger_map_keys = 0
nmap <leader>o :Ranger<CR>

" Presenting
let g:presenting_top_margin = 2

" Haskell
au BufWritePre *.hs call CocAction('format')

" Alex, Happy (Parser)
au BufRead,BufNewFile *.x set filetype=alex
au BufRead,BufNewFile *.y set filetype=happy

" Markdown
let g:vim_markdown_conceal = 1
let g:vim_markdown_conceal_code_blocks = 1

" Java
let g:syntastic_java_checkers = []
command! -nargs=0 IdeaFormat silent :w | exec "!idea format %" | :e

" PureScript
au FileType purescript setlocal commentstring=--\ %s
au BufWritePre *.purs call CocAction('format')

" Include temporary vim settings
if filereadable("/tmp/.vimrc")
  source /tmp/.vimrc
endif

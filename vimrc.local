" Vim configuration

scriptencoding utf-8
set relativenumber
set confirm
set shell=/bin/bash
set shortmess+=c
set nobackup
set nowritebackup
set noswapfile
set signcolumn=yes

" updatetime has performance impact
set updatetime=500

" Allow project-specific .vimrc files
set exrc
set secure

" gvim
set guioptions=c
set guifont=Iosevka\ Nerd\ Font\ 14
let g:nerdtree_tabs_open_on_gui_startup = 0

" Theme
colo dracula
let g:airline_powerline_fonts = 1
let g:airline_theme = 'dracula'
let g:airline#extensions#tagbar#enabled = 0
let g:airline_highlighting_cache = 1

" Switch themes
command Dracula colo dracula | set nocursorline
command Dark colo seoul | set nocursorline
command Light highlight CursorLine ctermbg=darkgray ctermfg=white | set cursorline | colo github

" Copy command
vnoremap <C-x> :!pbcopy<CR>
vnoremap <C-c> :w !pbcopy<CR><CR>

" Tab is the same as <C-i> and should jump forward
nunmap <Tab>

" Paste multiple times
xnoremap p "_dP

" Exit insert mode
inoremap jj <ESC>

" Save
nnoremap <C-s> :w<CR>
inoremap <C-s> <ESC>:w<CR>

" Saves the file (handling the permission-denied error)
cnoremap w!! w !sudo tee % >/dev/null

" Date
inoremap <C-d> <C-R>=strftime("%Y-%m-%d")<CR>
cnoremap <C-d> <C-R>=strftime("%Y-%m-%d")<CR>

" Open links in browser
let g:netrw_nogx = 1
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)

" Expand snippets
let g:UltiSnipsExpandTrigger='<c-j>'

" Multiple cursors
let g:multi_cursor_exit_from_visual_mode = 1
let g:multi_cursor_exit_from_insert_mode = 1
let g:multi_cursor_start_word_key = '<C-n>'
let g:multi_cursor_select_all_word_key = '<leader><C-n>'

" Elm
let g:polyglot_disabled = ['elm']

" Ale Linting
let g:ale_lint_on_text_changed = 0
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_save = 1
nmap <silent> <leader>P :ALEFix<CR>

let g:ale_fixers = {
      \ 'css': ['prettier'],
      \ 'elm': ['elm-format'],
      \ 'haskell': ['hindent'],
      \ 'html': ['prettier'],
      \ 'javascript': ['prettier'],
      \ 'json': ['prettier'],
      \ 'less': ['prettier'],
      \ 'markdown': ['prettier'],
      \ 'nix': ['nixpkgs-fmt'],
      \ 'scala': [],
      \ 'scss': ['prettier'],
      \ 'sh': ['shfmt'],
      \ 'typescript': ['prettier'],
      \ 'yaml': ['prettier']
      \}

let g:ale_linters = {
      \ 'elm': [],
      \ 'haskell': [],
      \ 'java': [],
      \ 'javascript': ['eslint'],
      \ 'markdown': ['markdownlint'],
      \ 'scala' : [],
      \ 'sh': ['shellcheck']
      \}


" List toggle
let g:lt_location_list_toggle_map = '<leader>l'
let g:lt_quickfix_list_toggle_map = '<leader>ö'

" Ctags
set tags+=tags;tags.vendors;,tags;

let g:tagbar_type_elm = {
      \ 'kinds' : [
      \ 'f:function:0:0',
      \ 'm:modules:0:0',
      \ 'i:imports:1:0',
      \ 't:types:1:0',
      \ 'a:type aliases:0:0',
      \ 'c:type constructors:0:0',
      \ 'p:ports:0:0',
      \ 's:functions:0:0',
      \ ]
      \}

let g:tagbar_type_markdown = {
      \ 'ctagstype' : 'markdown',
      \ 'kinds' : [
      \ 'h:Heading_L1',
      \ 'i:Heading_L2',
      \ 'k:Heading_L3'
      \ ]
      \}


" Search with Rg (overwrites vimrc)
nnoremap <silent> <Leader>f :Rg<CR>
nnoremap <silent> <leader>F :Rgrep<CR>
" Rg will ignore filenames
command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \ 'rg --column --line-number --no-heading --color=always --glob=!package-lock.json --smart-case '.shellescape(<q-args>),
      \ 1,
      \ {'options': '--delimiter : --nth 2..'},
      \ <bang>0)


" Spell checking
highlight clear SpellBad
highlight SpellBad term=underline cterm=underline ctermfg=009
command! -nargs=0 German silent set spelllang=de
command! -nargs=0 English silent set spelllang=en
augroup markdown
  au!
  au FileType markdown,text,gitcommit setlocal spell
  au FileType markdown,text,gitcommit nnoremap <buffer> <leader>s 1z=]S
  au FileType markdown,text,gitcommit nnoremap <buffer> <leader>a ]S
augroup END

" Zen mode / goyo
nnoremap <F6> :Goyo<CR>

" Command to read windows files (crlf)
abbrev windowsfile e ++ff=dos
abbrev dosfile e ++ff=dos

" Startify
let g:startify_files_number = 3
let g:startify_change_to_dir = 0
let startify_custom_header = split(system('toilet -f pagga " VIM Editor"'), '\n')

" Rooter
let g:rooter_silent_chdir = 1
let g:rooter_patterns = ['package.json', 'elm.json', 'stack.yaml', 'pom.xml', '.git/']

" Coc
let g:coc_global_extensions = [
      \ 'coc-java',
      \ 'coc-json',
      \ 'coc-prettier',
      \ 'coc-tsserver',
      \ 'coc-ultisnips',
      \ 'coc-vetur'
      \ ]

hi! link CocErrorHighlight SpellBad
hi! CocFloating ctermbg=236 guibg=#292c3a

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call CocAction('fold', <f-args>)

nnoremap <F5> :CocRebuild<CR>
nmap <leader>r <Plug>(coc-rename)
nmap <leader>R <Plug>(coc-refactor)
nmap <silent> <leader>s <Plug>(coc-fix-current)
nmap <silent> <leader>S <Plug>(coc-codeaction)
nmap <silent> <leader>a <Plug>(coc-diagnostic-next)
nmap <silent> <leader>A <Plug>(coc-diagnostic-next-error)
nmap <silent> <leader>d <Plug>(coc-definition)
nmap <silent> <leader>g :call CocAction('doHover')<CR>
nmap <silent> K         :call CocAction('doHover')<CR>
nmap <silent> <leader>t <Plug>(coc-type-definition)
nmap <silent> <leader>u <Plug>(coc-references)
nmap <silent> <leader>i <Plug>(coc-implementation)
nmap <silent> <leader>p :call CocActionAsync('format')<CR>
xmap <silent> <leader>p <Plug>(coc-format-selected)
nnoremap <silent> <leader>o :call CocAction('runCommand', 'editor.action.organizeImport')<CR>

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <c-space> coc#refresh()
inoremap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<TAB>" : coc#refresh()
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" Java
let g:syntastic_java_checkers = []
command! -nargs=0 IdeaFormat silent exec "!idea format %"

" vimdiff
if &diff
  map <leader>1 :diffget LOCAL<CR>
  map <leader>2 :diffget BASE<CR>
  map <leader>3 :diffget REMOTE<CR>
  map <leader>g :diffget<CR>
  map <leader>d :difft<CR>
  map <leader>o :diffo<CR>
endif

" Git gutter
let g:gitgutter_sign_priority = 1
let g:gitgutter_sign_added = '✚'
let g:gitgutter_sign_modified = '➜'
let g:gitgutter_sign_removed = '✘'
let g:gitgutter_sign_removed_first_line = '✘'
let g:gitgutter_sign_modified_removed='±'

" NerdTree
let g:NERDTreeMinimalUI = 1
nmap <silent> <leader>n :NERDTreeToggle<CR>
nmap <silent> <leader>N :NERDTreeFind<CR>
